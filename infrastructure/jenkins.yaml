Description: >
     This cloudfomation script will create and configure an ec2 instances and run jenkins inside it.

Parameters:
   InstanceType:
      Description: 'WebServer EC2 instance type'
      Type: 'String'
      Default: 't2.small'
      ConstraintDescription: 'must be a valid EC2 instance type.'

Resources:
   Ec2Instances:
      Type: "AWS::EC2::Instance"
      Properties:
        ImageId: "ami-050bc013"
        KeyName: "techgig"
        InstanceType: !Ref InstanceType
        AvailabilityZone: "us-east-1a"
        SecurityGroupIds: [!GetAtt SSHSecurityGroup.GroupId]
        SubnetId: !Ref JenkinsSubnet
        UserData:                       
          Fn::Base64: !Sub |            
            #!/bin/bash -xe
            yum update -y
            yum install java-1.8.0 -y
            yum remove java-1.7.0-openjdk -y
            wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo
            rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key
            yum install jenkins -y
            service jenkins start
            yum install git -y
            usermod -aG docker jenkins


#        BlockDeviceMappings:
##          -
##            DeviceName: "/dev/sda1"
##            Ebs:
##              VolumeSize: "50"
##          -
#          - DeviceName: "/dev/sdm"
#            Ebs:
#               VolumeType: "io1"
#               Iops: "200"
#               DeleteOnTermination: "false"
#               VolumeSize: "20"
#          - DeviceName: "/dev/sdk"
#            NoDevice: {}
   MyEIP:
      Type: "AWS::EC2::EIP"
      Properties:
        InstanceId: !Ref Ec2Instances

   SSHSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        VpcId: !Ref JenkinsVPC
        GroupDescription: "Enable SSH access via port 22"
        SecurityGroupIngress:
            -
              CidrIp: "0.0.0.0/0"
              FromPort: "22"
              IpProtocol: "tcp"
              ToPort: "22"
            -
              CidrIp: "0.0.0.0/0"
              FromPort: "8080"
              IpProtocol: -1
              ToPort: "8080"

   JenkinsVPC:
      Type: "AWS::EC2::VPC"
      Properties:
        CidrBlock: "10.0.0.0/16"
        Tags:
           - Key: "Name"
             Value: "Jenkin's VPC"

   JenkinsSubnet:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId: !Ref JenkinsVPC
        AvailabilityZone: "us-east-1a"
        CidrBlock: "10.0.1.0/24"
        MapPublicIpOnLaunch: true
        Tags:
           - Key: "Name"
             Value: "Jenkin's Subnet"

   InternetGateway:
      Type: "AWS::EC2::InternetGateway"
      DependsOn: JenkinsVPC
      Properties:
        Tags:
          - Key: "Name"
            Value: "Jenkins IgW"

   InternetGatewayAttachment:
      Type: "AWS::EC2::VPCGatewayAttachment"
      DependsOn: InternetGateway
      Properties:
         InternetGatewayId: !Ref InternetGateway
         VpcId: !Ref JenkinsVPC


   JenkinsRouteTable:
      Type: "AWS::EC2::RouteTable"
      Properties:
         VpcId: !Ref JenkinsVPC
         Tags:
            - Key: "Name"
              Value: "Jenkins Route Table"

   DefaultPublicRoute:
      Type: "AWS::EC2::Route"
      DependsOn: InternetGatewayAttachment
      Properties:
         RouteTableId: !Ref JenkinsRouteTable
         DestinationCidrBlock: "0.0.0.0/0"
         GatewayId: !Ref InternetGateway

   PublicSubnet1RouteTableAssociation:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
         RouteTableId: !Ref JenkinsRouteTable
         SubnetId: !Ref JenkinsSubnet










#   JenkinsRouteTable:
#           Type: "AWS::EC2::RouteTable"
#           Properties:
#               VpcId: !Ref VPC
#               Tags:
#                   - Key: "Name"
#                     Value: "Jenkins Public Routes"
#
#       DefaultPublicRoute:
#           Type: "AWS::EC2::Route"
#           DependsOn: "InternetGatewayAttachment"
#           Properties:
#               RouteTableId: !Ref PublicRouteTable
#               DestinationCidrBlock: 0.0.0.0/0
#               GatewayId: !Ref InternetGateway
#
#       PublicSubnet1RouteTableAssociation:
#           Type: AWS::EC2::SubnetRouteTableAssociation
#           Properties:
#               RouteTableId: !Ref PublicRouteTable
#               SubnetId: !Ref PublicSubnet1
#
#



#  Properties:
#      AllocationId: !GetAtt ControlPortAddress.AllocationId
#      NetworkInterfaceId: !Ref controlXface
#  WebPortAddress:
#    Type: AWS::EC2::EIP
#    Properties:
#      Domain: vpc
#  AssociateWebPort:
#    Type: AWS::EC2::EIPAssociation
#    Properties:
#      AllocationId: !GetAtt WebPortAddress.AllocationId
#      NetworkInterfaceId: !Ref webXface
#  SSHSecurityGroup:
#    Type: AWS::EC2::SecurityGroup
#    Properties:
#      VpcId: !Ref VpcId
#      GroupDescription: Enable SSH access via port 22
#      SecurityGroupIngress:
#      - CidrIp: 0.0.0.0/0
#        FromPort: 22
#        IpProtocol: tcp
#        ToPort: 22
#  WebSecurityGroup:
#    Type: AWS::EC2::SecurityGroup
#    Properties:
#      VpcId: !Ref VpcId
#      GroupDescription: Enable HTTP access via user defined port
#      SecurityGroupIngress:
#      - CidrIp: 0.0.0.0/0
#        FromPort: 80
#        IpProtocol: tcp
#        ToPort: 80
#  controlXface:
#    Type: AWS::EC2::NetworkInterface
#    Properties:
#      SubnetId: !Ref SubnetId
#      Description: Interface for controlling traffic such as SSH
#      GroupSet:
#      - !Ref SSHSecurityGroup
#      SourceDestCheck: true
#      Tags:
#        -
#          Key: Network
#          Value: Control
#  webXface:
#    Type: AWS::EC2::NetworkInterface
#    Properties:
#      SubnetId: !Ref SubnetId
#      Description: Interface for controlling traffic such as SSH
#      GroupSet:
#      - !Ref WebSecurityGroup
#      SourceDestCheck: true
#      Tags:
#        -
#          Key: Network
#          Value: Web
#  Ec2Instance:
#    Type: AWS::EC2::Instance
#    Properties:
#      ImageId: !FindInMap [ RegionMap, !Ref 'AWS::Region', AMI ]
#      KeyName: !Ref KeyName
#      NetworkInterfaces:
#        -
#          NetworkInterfaceId: !Ref controlXface
#          DeviceIndex: 0
#        -
#          NetworkInterfaceId: !Ref webXface
#          DeviceIndex: 1
#      Tags:
#        -
#          Key: Role
#          Value: Test Instance
#      UserData:
#        Fn::Base64: !Sub |
#          #!/bin/bash -xe
#          yum install ec2-net-utils -y
#          ec2ifup eth1
#          service httpd start
#  ServerSecurityGroup:
#  Type: AWS::EC2::SecurityGroup
#  Properties:
#    GroupDescription: allow connections from specified CIDR ranges
#    SecurityGroupIngress:
#    - IpProtocol: tcp
#      FromPort: 80
#      ToPort: 80
#      CidrIp: 0.0.0.0/0
#    - IpProtocol: tcp
#      FromPort: 22
#      ToPort: 22
#      CidrIp: 192.168.1.1/32
#  myVPC:
#  Type: AWS::EC2::VPC
#  Properties:
#    CidrBlock: !Ref myVPCCIDRRange
#    EnableDnsSupport: false
#    EnableDnsHostnames: false
#    InstanceTenancy: default
#myInstance:
#  Type: AWS::EC2::Instance
#  Properties:
#    ImageId: !FindInMap [ AWSRegionToAMI , !Ref 'AWS::Region', 64 ]
#    SecurityGroupIds:
#    - !GetAtt myVPC.DefaultSecurityGroup
#    SubnetId: !Ref mySubnet
#







#myInstance:
#  Type: AWS::EC2::Instance
#  Properties:
#    ImageId: !FindInMap [ AWSRegionToAMI , !Ref 'AWS::Region', 64 ]
#    SecurityGroupIds:
#    - !GetAtt myVPC.DefaultSecurityGroup
#    SubnetId: !Ref mySubnet
#
#
#   EC2Instance:
#      Type: "AWS::EC2::Instance"
#Properties:
#     Type: "AWS::EC2::Instance"
#     Affinity: String
#  AvailabilityZone: String
#  BlockDeviceMappings:
#    - EC2 Block Device Mapping
#  DisableApiTermination: Boolean
#  EbsOptimized: Boolean
#  HostId: String
#  IamInstanceProfile: String
#  ImageId: String
#  InstanceInitiatedShutdownBehavior: String
#  InstanceType: String
#  Ipv6AddressCount: Integer
#  Ipv6Addresses:
#    - IPv6 Address Type
#  KernelId: String
#  KeyName: String
#  Monitoring: Boolean
#  NetworkInterfaces:
#    - EC2 Network Interface
#  PlacementGroupName: String
#  PrivateIpAddress: String
#  RamdiskId: String
#  SecurityGroupIds:
#    - String
#  SecurityGroups:
#    - String
#  SourceDestCheck: Boolean
#  SsmAssociations:
#    - SSMAssociation
#  SubnetId: String
#  Tags:
#    - Resource Tag
#  Tenancy: String
#  UserData: String
#  Volumes:
#    - EC2 MountPoint
#  AdditionalInfo: String
#
#
##
#
#AWSTemplateFormatVersion: '2010-09-09'
#  Description: 'AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample: Create an Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based on the region in which the stack is run. This example creates an EC2 security group for the instance to give you SSH access. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.'
#
#  Parameters:
#
#   KeyName:
#      Description: 'Name of an existing EC2 KeyPair to enable SSH access to the instance'
#      Type: 'AWS::EC2::KeyPair::KeyName, '
#      ConstraintDescription: 'must be the name of an existing EC2 KeyPair'
#
#   InstanceType:
#      Description: 'WebServer EC2 instance type',
#      Type: 'String'
#      Default: 't2.small'
#
#      ConstraintDescription: 'must be a valid EC2 instance type.'
#   SSHLocation:
#      Description: 'The IP address range that can be used to SSH to the EC2 instances',
#      Type: 'String'
#      MinLength: '9'
#      MaxLength: '18'
#      Default: 0.0.0.0/0
#      AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})',
#      ConstraintDescription: 'must be a valid IP CIDR range of the form x.x.x.x/x.'

#   Mappings:
#      AWSInstanceType2Arch: {t1.micro: {Arch: PV64}, t2.nano: {Arch: HVM64}, t2.micro: {Arch: HVM64}, t2.small: {Arch: HVM64}, t2.medium: {Arch: HVM64}, t2.large: {Arch: HVM64}, m1.small: {Arch: PV64}, m1.medium: {Arch: PV64}, m1.large: {Arch: PV64}, m1.xlarge: {Arch: PV64}, m2.xlarge: {Arch: PV64}, m2.2xlarge: {Arch: PV64}, m2.4xlarge: {Arch: PV64}, m3.medium: {Arch: HVM64}, m3.large: {Arch: HVM64}, m3.xlarge: {Arch: HVM64}, m3.2xlarge: {Arch: HVM64}, m4.large: {Arch: HVM64}, m4.xlarge: {Arch: HVM64}, m4.2xlarge: {Arch: HVM64}, m4.4xlarge: {Arch: HVM64}, m4.10xlarge: {Arch: HVM64}, c1.medium: {Arch: PV64}, c1.xlarge: {Arch: PV64}, c3.large: {Arch: HVM64}, c3.xlarge: {Arch: HVM64}, c3.2xlarge: {Arch: HVM64}, c3.4xlarge: {Arch: HVM64}, c3.8xlarge: {Arch: HVM64}, c4.large: {Arch: HVM64}, c4.xlarge: {Arch: HVM64}, c4.2xlarge: {Arch: HVM64}, c4.4xlarge: {Arch: HVM64}, c4.8xlarge: {Arch: HVM64}, g2.2xlarge: {Arch: HVMG2}, g2.8xlarge: {Arch: HVMG2}, r3.large: {Arch: HVM64}, r3.xlarge: {Arch: HVM64}, r3.2xlarge: {Arch: HVM64}, r3.4xlarge: {Arch: HVM64}, r3.8xlarge: {Arch: HVM64}, i2.xlarge: {Arch: HVM64}, i2.2xlarge: {Arch: HVM64}, i2.4xlarge: {Arch: HVM64}, i2.8xlarge: {Arch: HVM64}, d2.xlarge: {Arch: HVM64}, d2.2xlarge: {Arch: HVM64}, d2.4xlarge: {Arch: HVM64}, d2.8xlarge: {Arch: HVM64}, hi1.4xlarge: {Arch: HVM64}, hs1.8xlarge: {Arch: HVM64}, cr1.8xlarge: {Arch: HVM64}, cc2.8xlarge: {Arch: HVM64}}
#      AWSInstanceType2NATArch: {t1.micro: {Arch: NATPV64}, t2.nano: {Arch: NATHVM64}, t2.micro: {Arch: NATHVM64}, t2.small: {Arch: NATHVM64}, t2.medium: {Arch: NATHVM64}, t2.large: {Arch: NATHVM64}, m1.small: {Arch: NATPV64}, m1.medium: {Arch: NATPV64}, m1.large: {Arch: NATPV64}, m1.xlarge: {Arch: NATPV64}, m2.xlarge: {Arch: NATPV64}, m2.2xlarge: {Arch: NATPV64}, m2.4xlarge: {Arch: NATPV64}, m3.medium: {Arch: NATHVM64}, m3.large: {Arch: NATHVM64}, m3.xlarge: {Arch: NATHVM64}, m3.2xlarge: {Arch: NATHVM64}, m4.large: {Arch: NATHVM64}, m4.xlarge: {Arch: NATHVM64}, m4.2xlarge: {Arch: NATHVM64}, m4.4xlarge: {Arch: NATHVM64}, m4.10xlarge: {Arch: NATHVM64}, c1.medium: {Arch: NATPV64}, c1.xlarge: {Arch: NATPV64}, c3.large: {Arch: NATHVM64}, c3.xlarge: {Arch: NATHVM64}, c3.2xlarge: {Arch: NATHVM64}, c3.4xlarge: {Arch: NATHVM64}, c3.8xlarge: {Arch: NATHVM64}, c4.large: {Arch: NATHVM64}, c4.xlarge: {Arch: NATHVM64}, c4.2xlarge: {Arch: NATHVM64}, c4.4xlarge: {Arch: NATHVM64}, c4.8xlarge: {Arch: NATHVM64}, g2.2xlarge: {Arch: NATHVMG2}, g2.8xlarge: {Arch: NATHVMG2}, r3.large: {Arch: NATHVM64}, r3.xlarge: {Arch: NATHVM64}, r3.2xlarge: {Arch: NATHVM64}, r3.4xlarge: {Arch: NATHVM64}, r3.8xlarge: {Arch: NATHVM64}, i2.xlarge: {Arch: NATHVM64}, i2.2xlarge: {Arch: NATHVM64}, i2.4xlarge: {Arch: NATHVM64}, i2.8xlarge: {Arch: NATHVM64}, d2.xlarge: {Arch: NATHVM64}, d2.2xlarge: {Arch: NATHVM64}, d2.4xlarge: {Arch: NATHVM64}, d2.8xlarge: {Arch: NATHVM64}, hi1.4xlarge: {Arch: NATHVM64}, hs1.8xlarge: {Arch: NATHVM64}, cr1.8xlarge: {Arch: NATHVM64}, cc2.8xlarge: {Arch: NATHVM64}}
#      AWSRegionArch2AMI: {us-east-1: {PV64: ami-2a69aa47, HVM64: ami-6869aa05, HVMG2: ami-1f12e965}, us-west-2: {PV64: ami-7f77b31f, HVM64: ami-7172b611, HVMG2: ami-5c9b6124}, us-west-1: {PV64: ami-a2490dc2, HVM64: ami-31490d51, HVMG2: ami-7291a112}, eu-west-1: {PV64: ami-4cdd453f, HVM64: ami-f9dd458a, HVMG2: ami-b411c5cd}, eu-west-2: {PV64: NOT_SUPPORTED, HVM64: ami-886369ec, HVMG2: NOT_SUPPORTED}, eu-central-1: {PV64: ami-6527cf0a, HVM64: ami-ea26ce85, HVMG2: ami-be40f2d1}, ap-northeast-1: {PV64: ami-3e42b65f, HVM64: ami-374db956, HVMG2: ami-3efd2c58}, ap-northeast-2: {PV64: NOT_SUPPORTED, HVM64: ami-2b408b45, HVMG2: NOT_SUPPORTED}, ap-southeast-1: {PV64: ami-df9e4cbc, HVM64: ami-a59b49c6, HVMG2: ami-3e91ed5d}, ap-southeast-2: {PV64: ami-63351d00, HVM64: ami-dc361ebf, HVMG2: ami-84a142e6}, ap-south-1: {PV64: NOT_SUPPORTED, HVM64: ami-ffbdd790, HVMG2: ami-25ffbe4a}, us-east-2: {PV64: NOT_SUPPORTED, HVM64: ami-f6035893, HVMG2: NOT_SUPPORTED}, ca-central-1: {PV64: NOT_SUPPORTED, HVM64: ami-730ebd17, HVMG2: NOT_SUPPORTED}, sa-east-1: {PV64: ami-1ad34676, HVM64: ami-6dd04501, HVMG2: NOT_SUPPORTED}, cn-north-1: {PV64: ami-77559f1a, HVM64: ami-8e6aa0e3, HVMG2: NOT_SUPPORTED}, cn-northwest-1: {PV64: ami-80707be2, HVM64: ami-cb858fa9, HVMG2: NOT_SUPPORTED}}

#   Resources:
#       EC2Instance:
#       Type: 'AWS::EC2::Instance'
#       Properties:
#           InstanceType:
#                Ref: InstanceType}
#                SecurityGroups: [{Ref: InstanceSecurityGroup}]
#                KeyName: {Ref: KeyName},
#                ImageId: {'Fn::FindInMap': [AWSRegionArch2AMI, {Ref: 'AWS::Region'}, {'Fn::FindInMap': [AWSInstanceType2Arch, {Ref: InstanceType}, Arch]}]}}}
#       InstanceSecurityGroup:
#       Type: 'AWS::EC2::SecurityGroup',
#       Properties:
#           GroupDescription: 'Enable SSH access via port 22',
#           SecurityGroupIngress: [{IpProtocol: tcp, FromPort: '22', ToPort: '22', CidrIp: {Ref: SSHLocation}}]}}
#
#   Outputs:
#       InstanceId:
#       Description: 'InstanceId of the newly created EC2 instance'
#       Value:
#          Ref: 'EC2Instance'
#   AZ: {Description: 'Availability Zone of the newly created EC2 instance', Value: {'Fn::GetAtt': [EC2Instance, AvailabilityZone]}}
#   PublicDNS: {Description: 'Public DNSName of the newly created EC2 instance', Value: {'Fn::GetAtt': [EC2Instance, PublicDnsName]}}
#   PublicIP: {Description: 'Public IP address of the newly created EC2 instance', Value: {'Fn::GetAtt': [EC2Instance, PublicIp]}}
